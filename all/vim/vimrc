" Vyscond's vim setup

" ===========
" Basics
" ============

filetype off                  " required

"set nocompatible              " be iMproved, required
set noautoread
set number
set backspace=2
set mouse=a
set encoding=utf-8
"set tw=79
set colorcolumn=80
set tabstop=4
set shiftwidth=4
set smartindent
set expandtab
set wrap
set clipboard=unnamed
"set clipboard=unnamedplus
"set noswapfile
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
syntax enable
syntax on

" , it will replace W in command line with w, but only if it is neither
" followed nor preceded by word character, so :W<CR> will be replaced with
" :w<CR>, but :Write won't.
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq
cnoreabbrev WQ wq

" Terminus is love, Terminus is life
" Set it everywhere @_@
if has('gui_running')
    if has("gui_gtk2")
        set guifont=Terminus\ 9
    elseif has("gui_macvim")
        set guifont=Terminus\ Regular:h9
    elseif has("gui_win32")
       set guifont=Terminus:h9:cANSI "windows config
    endif
endif

" Load vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))
  execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.github.com/junegunn/vim-plug/master/plug.vim'
else
  call plug#begin('~/.vim/plugged')

  " Enhacing Vim
  " ------------------------------

  Plug 'vim-airline/vim-airline'
  "Plug 'pseewald/vim-anyfold'

  " Exploring and Organizing files
  " ------------------------------

  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'
  Plug 'ctrlpvim/ctrlp.vim'

  " Code Sugar
  " -----------------------------

  " Plug 'mattn/emmet-vim'
  Plug 'ervandew/supertab'
  Plug 'Yggdroot/indentLine'

  " Language highlight
  " -----------------------------

  "Plug 'beyondwords/vim-twig'
  "Plug 'keith/swift.vim'
  Plug 'airblade/vim-gitgutter'

  " Themes
  " -----------------------------

  Plug 'nanotech/jellybeans.vim'
  Plug 'jnurmine/Zenburn'
  "Plug 'ntk148v/vim-horizon'
  "Plug 'axvr/photon.vim'
  "Plug 'smallwat3r/vim-mono-sw'
  "Plug 'chriskempson/base16-vim'
  "Plug 'KKPMW/moonshine-vim'
  call plug#end()
endif

colorscheme jellybeans
"colorscheme zenburn
"colorscheme moonshine_lowcontrast

" ==============================
" Plugin settings
" ==============================

" Vim
let g:indentLine_color_term = 242

"GVim
let g:indentLine_color_gui = '#EFEFEF'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

let g:indentLine_char = '|'

"let g:indentLine_concealcursor = 'vc' "(default 'inc')
"let g:indentLine_conceallevel=0 "(default 2)

"let g:indentLine_enabled = 1

"explore mode
let g:netrw_liststyle=3

"let g:user_emmet_leader_key=','

"controlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn|__pycache__|env|venv))|(env|venv)$',
  \ 'file': '\v\.(exe|so|dll|pyo|pyc)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"let g:ctrlp_prompt_mappings = {
"    \ 'AcceptSelection("e")': ['<c-t>'],
"    \ 'AcceptSelection("t")': ['<CR>', '<2-LeftMouse>'],
"    \ }

" ========================
" Air Line
" ========================

let g:airline_powerline_fonts = 1

"if !exists('g:airline_symbols')
"    let g:airline_symbols = {}
"endif

let g:airline#extensions#tabline#enabled = 1

" unicode symbols
let g:airline_left_sep = ''
let g:airline_right_sep = ''
"let g:airline_symbols.linenr = 'nr'
"let g:airline_symbols.branch = 'âŽ‡'
"let g:airline_symbols.paste = 'p'
"let g:airline_symbols.whitespace = 'w'

"let NERDTreeMapOpenInTab='<S-ENTER>'
" ---(NERD Commenter)---------------------------------------------------------
" Add spaces after comment delimiters by default
"let g:NERDSpaceDelims = 1

" " Use compact syntax for prettified multi-line comments
"let g:NERDCompactSexyComs = 1

" AnyFold
"let anyfold_activate=0
"set foldlevel=0

" =================
" NNN
" =================

"let g:nnn#set_default_mappings = 0
"let g:nnn#command = 'nnn -l'

" Opens the nnn window in a split
"let g:nnn#layout = 'vnew' " or vnew, tabnew etc.

" Or pass a dictionary with window size
" let g:nnn#layout = { 'left': '~20%' } " or right, up, down

"let g:nnn#action = {
"      \ '<c-t>': 'tab split',
"      \ '<c-x>': 'split',
"      \ '<c-v>': 'vsplit' }

let $DISABLE_FILE_OPEN_ON_NAV=1

" =====================
" Key Mapping
" =====================

" Sessions
map <F2> :mksession! ~/vim_session <cr> " Quick write session with F2
map <F3> :source ~/vim_session <cr>     " And load session with F3

" Tabs
map <Tab> :tabnext<cr>
map <S-Tab> :tabprevious<cr>
map <C-n> :tabnew<CR>

" File Exploration
" ----------------------------

map <C-e> :NERDTreeTabsToggle<CR>
"map <C-e> :NnnPicker<CR>
"map <C-e> :Te<CR>
"map <C-e> :Explore<CR>
"map <ESC>[5D <C-Left> :b<cr>

" Saving and Quitting
" -----------------------

map <C-S> :w<CR>
map <C-b> :w<CR>
nmap <C-q> :q!<CR>
map <C-x> :q<CR>
map <q> :q<CR>

" Window/Splits Navigation
" --------------------------------------
map <C-k> :wincmd k<CR>
map <C-j> :wincmd j<CR>
map <C-h> :wincmd h<CR>
map <C-l> :wincmd l<CR>

"nnoremap <Right> <C-w>l
"nnoremap <Left> <C-w>h
"nnoremap <Up> <C-w>k
"nnoremap <Down> <C-w>j

" Building Commands
" ------------------------------------
map <F10> :!make run<CR>
map <F11> :!make build<CR>

" Searching Terms
" ----------------------------------------
noremap <F4> :set hlsearch! hlsearch?<CR>

" Formatting JSON
" ---------------

com! Formatjson %!python -m json.tool
